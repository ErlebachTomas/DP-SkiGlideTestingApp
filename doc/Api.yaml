openapi: 3.0.0
info:
  title: DP
  version: 1.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: 'https://virtserver.swaggerhub.com/ErlebachTomas/DP-API/1.0.0'
  - url: 'http://localhost:1337/api/'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    DataStatus:
      type: string
      enum:
        - OFFLINE
        - ONLINE
        - UNKNOWN
        - REMOVED
    BaseModel:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/DataStatus'
    User:
      type: object
      properties:
        user_id:
          type: string
          description: Unique ID of the user
        email:
          type: string
          description: Email address of the user
        name:
          type: string
          description: Name of the user
        updated_at:
          type: string
          description: Timestamp of when the user was last updated
    Ski:
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseModel'
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        icon:
          type: string
        updatedAt:
          type: string
          format: date-time
    DataBody:
      type: object
      properties:
        userID:
          type: string
        data:
          $ref: '#/components/schemas/BaseModel'
    SkiDataBody:
      type: object
      properties:
        userID:
          type: string
        ski:
          $ref: '#/components/schemas/Ski'
    TestSession:
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseModel'
      properties:
        id:
          type: string
          description: The unique identifier of the test session
        datetime:
          type: string
          format: date-time
          description: The date and time of the test session
        airTemperature:
          type: number
          description: The air temperature during the test session
        snowTemperature:
          type: number
          description: The snow temperature during the test session
        snowType:
          type: integer
          description: The type of snow during the test session
        testType:
          type: integer
          description: The type of test performed during the test session
        humidity:
          type: number
          description: The humidity during the test session (optional)
        note:
          type: string
          description: Additional notes about the test session (optional)
        updatedAt:
          type: string
          description: ISO8601 date string
    SkiRide:
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseModel'
      properties:
        id:
          type: string
          description: The unique identifier for the ski ride
        skiID:
          type: string
          description: The identifier for the ski
        testSessionID:
          type: string
          description: The identifier for the test session
        result:
          type: number
          format: double
          description: The result of the ski ride
        note:
          type: string
          nullable: true
          description: The note for the ski ride
        updatedAt:
          type: string
          description: The date and time when the ski ride was last updated
      required:
        - id
        - skiID
        - testSessionID
        - result
        - updatedAt
paths:
  /getAllUsers:
    get:
      tags:
        - default
      summary: getAllUsers
      description: Returns a list of usernames of all users logged into the application
      parameters:
        - name: ''
          in: header
          schema:
            type: string
        - name: user
          in: query
          schema:
            type: string
          example: 'auth0|62c3317067fdea356d289028'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
/:
  get:
    tags:
      - default
    summary: test API using GET
    responses:
      '200':
        description: Successful response
        content:
          application/json: {}
  post:
    tags:
      - default
    summary: Test POST
    requestBody:
      content:
        application/x-www-form-urlencoded:
          schema:
            properties:
              Key:
                type: string
                example: Value
    responses:
      '200':
        description: Successful response
        content:
          application/json: {}
/private:
  get:
    tags:
      - default
    summary: /private (Auth0)
    description: test Auth0 tokenu
    security:
      - bearerAuth: []
    responses:
      '200':
        description: Successful response
        content:
          application/json: {}
/getAllUsersSki:
  get:
    summary: Get all ski data
    description: Retrieve all ski data for a specific user
    parameters:
      - in: query
        name: user
        required: true
        description: User ID (The ID of the user to retrieve data for)
        schema:
          type: string
    responses:
      200:
        description: OK
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Ski'
/deleteSki:
  post:
    summary: Delete skiing data
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SkiDataBody'
    responses:
      204:
        description: Successful
/updateSki:
  post:
    summary: Update an existing ski
    description: Update an existing ski for a specific user
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SkiDataBody'
    responses:
      204:
        description: Successful
/addSki:
  post:
    summary: Add a new ski
    description: Add a new ski for a specific user
    requestBody:
      description: Data for the new ski
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SkiDataBody'
    responses:
      201:
        description: Created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ski'
/deleteAllUsersSkis:
  get:
    summary: Delete all ski data for a user
    parameters:
      - in: query
        name: user
        required: true
        description: User ID
        schema:
          type: string
    responses:
      204:
        description: Successful

/syncSki:
  post:
    summary: Synchronize ski data
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SkiDataBody'
    responses:
      200:
        description: OK
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ski'

/getAllUserTests:
  get:
    summary: Get all test sessions for a user
    parameters:
      - in: query
        name: user
        required: true
        schema:
          type: string
    responses:
      '200':
        description: A list of test sessions for the given user
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TestSession'
  post:
    summary: Add a new test session
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataBody'
    responses:
      '200':
        description: The newly added test session
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestSession'
    deprecated: true
/deleteTestSession:
  post:
    summary: Delete a test session
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataBody'
    responses:
      '204':
        description: The test session was deleted successfully
    deprecated: true
/updateTestSession:
  post:
    summary: Update an existing test session
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataBody'
    responses:
      '200':
        description: The updated test session
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestSession'
    deprecated: true
/addTestSession:
  post:
    summary: Add a new test session
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataBody'
    responses:
      '200':
        description: The newly added test session
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestSession'
/syncTestSession:
  post:
    summary: Sync test session data
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataBody'
    responses:
      '200':
        description: The synced test session data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestSession'
/getAllSkiRide:
  get:
    summary: Get all ski rides for a user
    description: Returns a list of all ski rides for a specific user
    parameters:
      - name: user
        in: query
        description: User ID
        required: true
        schema:
          type: string
    responses:
      '200':
        description: A list of ski rides
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SkiRide'
/deleteSkiRide:
  post:
    summary: Delete a ski ride
    description: Deletes a specific ski ride
    requestBody:
      description: Ski ride data
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataBody'
    responses:
      '204':
        description: The ski ride has been successfully deleted
/updateSkiRide:
  post:
    summary: Update a ski ride
    description: Updates a specific ski ride
    requestBody:
      description: Ski ride data
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataBody'
    responses:
      '204':
        description: The ski ride has been successfully updated
/addSkiRide:
  post:
    summary: Add a new ski ride
    description: Adds a new ski ride for a specific user
    requestBody:
      description: Ski ride data
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataBody'
    responses:
      '201':
        description: The ski ride has been successfully added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkiRide'
/syncSkiRide:
  post:
    summary: Synchronize ski ride data
    description: Synchronizes ski ride data for a specific user
    requestBody:
      description: Ski ride data
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataBody'
    responses:
      '200':
        description: The synchronized ski ride data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkiRide'